# kth shorest 
# n,a=7,5
# l=[9 ,-3, 8, -6, -7, 18, 10]
# l.sort()
# print(l[a-1])
# print(l)





# graph is a non linear data sturucure 
# it is a collection of vertices and edges
# 

# d={"a":[b],
#    "b":[d,e],
#    "c":[a],
#    "d":[c,g],
#    "e":[f],
#    "f":[d],
#    "g":[]
#    }

# a={[0 1 0 0 0 0 0],
#    [0 0 0 1 0 1 0],
#    [1 0 0 0 0 0 0],
#    [0 0 1 0 0 0 1],
#    [0 0 0 0 0 1 0],
#    [0 0 0 1 0 0 0],
#    [0 0 0 0 0 0 0]
#    }


# for i in range(1,5):
#     print(chr(i),end="")





# from collections import defaultdict
# edges=[['a','b'],['b','d'],['a','c'],['c','e'],['e','f']]
# adj_list=defaultdict(list)
# for u,v in edges:
#     adj_list[u].append(v)
#     adj_list[v].append(u)
# print(adj_list)


# def bfs(graph,start):
#     visited=set()
#     q=[start]
#     while q:
#         n=q.pop(0)
#         if n not in visited:
#             print(n,end=" ")
#             visited.add(n)
#             q.extend(graph[n])
# graph=adj_list
# print(bfs(graph,"a"))
        
        
        
    
    
    
# def dfs(graph,n,visited=set()):
#     if n not in visited:
#         print(n,end=" ")
#         visited.add(n)
#         for i in graph[n]:
#             dfs(graph,i,visited)
        
# print(dfs(graph,"a"))
