bubble sort



arr=[7,3,6,5,9,1,2,4]
for i in range(len(arr)):
    for j in range(len(arr)-1):
        if arr[j]>arr[j+1]:
            temp=arr[j]
            arr[j]=arr[j+1]
            arr[j+1]=temp
print(arr)




selection sort




arr = [7, 3, 6, 5, 9, 1, 2, 4]

for i in range(len(arr)):
    min_idx = i
    for j in range(i+1, len(arr)):
        if arr[min_idx] > arr[j]:
            min_idx = j  
    arr[i], arr[min_idx] = arr[min_idx], arr[i]
print(arr)

            
       
       
       
insertion sort




arr = [7, 5, 4, 8, 2, 1, 3]
for i in range(1, len(arr)):   
    key = arr[i]
    j = i - 1
    while j >= 0 and arr[j] > key:
        arr[j+1] = arr[j]
        j -= 1
    arr[j+1] = key   
print(arr)




quick sort






arr=[5,3,8,4,2,7,1,10]
def quick_sort(arr):
    if len(arr)<=1:
        return arr
    pivot=arr[0]
    left=[x for x in arr[1:] if x<=pivot]
    right=[x for x in arr[1:] if x> pivot]
    return quick_sort(left)+[pivot]+quick_sort(right)

print(quick_sort(arr))
    


merge sort



def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    res = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            res.append(left[i])
            i += 1
        else:
            res.append(right[j]) 
            j += 1
    res.extend(left[i:])
    res.extend(right[j:])
    return res

arr = [8, 2, 7, 3, 6, 4, 5]
print(merge_sort(arr))

 
 


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SLL:
    def __init__(self):
        self.head = None

    def insert_at_begin(self, data):
        new = Node(data)
        new.next = self.head  
        self.head = new        

    def insert_at_end(self, data):
        new = Node(data)
        if self.head is None:
            self.head = new
        else:
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            temp.next = new

    def insert_at_specific(self, data, pos):
        if pos == 1:  # inserting at head
            self.insert_at_begin(data)
            return
        new = Node(data)
        temp = self.head
        for i in range(1, pos - 1):  # move to (pos-1)th node
            if temp is None:
                print("Position out of range")
                return
            temp = temp.next
        new.next = temp.next
        temp.next = new
        
        
        
    def deletion_at_begining(self):
        temp=self.head
        self.head=temp.next
        temp.next=None
        
    def deletion_at_end(self):
        prev=self.head
        temp=self.head.next
        while temp.next!=None:
            temp=temp.next
            prev=prev.next
        prev.next=None
        
    def deletion_at_particular(self,pos):
        prev=self.head
        temp=self.head.next
        for i in range(1,pos-1):
            temp=temp.next
            prev=prev.next
        prev.next=temp.next
        temp.next=None
        
            

    def traversal(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp = self.head
            while temp is not None:
                print(temp.data, end=" -> ")
                temp = temp.next
            print("None")
            
    def sum_of_nodes(self):
        total = 0
        temp = self.head
        while temp is not None:
            total += temp.data
            temp = temp.next
        return total

    def even_of_nodes(self):
        even=0
        temp=self.head
        while temp is not None:
            if temp.data%2==0:
                even+=temp.data
            temp=temp.next
        return even
    
    def even_nodes(self):
        even_nodes=0
        pos=1
        temp=self.head
        while temp!=None:
            if pos%2==0:
                even_nodes+=temp.data
            temp=temp.next
            pos+=1
        return even_nodes
            



sll = SLL()

sll.insert_at_begin(5)
sll.traversal()

sll.insert_at_begin(2)
sll.traversal()

sll.insert_at_end(20)
sll.traversal()

sll.insert_at_specific(8, 3)
sll.traversal()


print(sll.sum_of_nodes())
print(sll.even_of_nodes())
print(sll.even_nodes())
